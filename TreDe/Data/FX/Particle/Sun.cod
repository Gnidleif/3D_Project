//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    float4x4 gViewProj;                 // Offset:    0, size:   64
    float3  gEyePos;                    // Offset:   64, size:   12
    float3  gEmitPos;                   // Offset:   80, size:   12
    float3  gEmitDir;                   // Offset:   96, size:   12
    float   gGameTime;                  // Offset:  108, size:    4
    float   gTimeStep;                  // Offset:  112, size:    4
}

cbuffer cbFixed
{
    float3  gAccel = { 0 };             // Offset:    0, size:   12
    float2  gQuadTexC[4] = { 0, 1, 1, 1, 0, 0, 1, 0 };// Offset:   16, size:   56
}

//
// 7 local object(s)
//
Texture2DArray gTexArray;
Texture1D gRandomTex;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState NoDepthWrites
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
GeometryShader GS_StreamOut = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cbPerFrame
        // {
        //
        //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
        //   float3 gEyePos;                    // Offset:   64 Size:    12 [unused]
        //   float3 gEmitPos;                   // Offset:   80 Size:    12
        //   float3 gEmitDir;                   // Offset:   96 Size:    12 [unused]
        //   float gGameTime;                   // Offset:  108 Size:     4
        //   float gTimeStep;                   // Offset:  112 Size:     4
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim Slot Elements
        // ------------------------------ ---------- ------- ----------- ---- --------
        // samLinear                         sampler      NA          NA    0        1
        // gRandomTex                        texture  float4          1d    0        1
        // cbPerFrame                        cbuffer      NA          NA    0        1
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue Format   Used
        // -------------------- ----- ------ -------- -------- ------ ------
        // POSITION                 0   xyz         0     NONE  float   xyz 
        // VELOCITY                 0   xyz         1     NONE  float   xyz 
        // SIZE                     0   xy          2     NONE  float   xy  
        // AGE                      0     z         2     NONE  float     z 
        // TYPE                     0   x           3     NONE   uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue Format   Used
        // -------------------- ----- ------ -------- -------- ------ ------
        // m0:POSITION              0   xyz         0     NONE  float   xyz 
        // m0:VELOCITY              0   xyz         1     NONE  float   xyz 
        // m0:SIZE                  0   xy          2     NONE  float   xy  
        // m0:AGE                   0     z         2     NONE  float     z 
        // m0:TYPE                  0   x           3     NONE   uint   x   
        //
        gs_5_0
        dcl_globalFlags refactoringAllowed
        dcl_constantbuffer cb0[8], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_input v[1][0].xyz
        dcl_input v[1][1].xyz
        dcl_input v[1][2].xy
        dcl_input v[1][2].z
        dcl_input v[1][3].x
        dcl_temps 3
        dcl_inputprimitive point 
        dcl_stream m0
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o1.xyz
        dcl_output o2.xy
        dcl_output o2.z
        dcl_output o3.x
        dcl_maxout 2
        
        #line 89 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\Particle\Sun.fx"
        add r0.x, cb0[7].x, v[0][2].z  // input<8:Inf>
        if_z v[0][3].x
          lt r0.y, l(0.005000), r0.x
          if_nz r0.y
            nop 
        
        #line 62
            add r0.y, cb0[6].w, l(0.000000)  // u<0>
            sample_l_indexable(texture1d)(float,float,float,float) r0.yzw, r0.y, t0.wxyz, s0, l(0.000000)  // v<0:Inf,1:Inf,2:Inf>
            dp3 r1.x, r0.yzwy, r0.yzwy
            rsq r1.x, r1.x
            mul r0.yzw, r0.yyzw, r1.xxxx  // RandUnitVec3<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
        
        #line 95
            mov r0.yzw, r0.yyzw  // vRandom<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
            mul r1.x, r0.y, l(0.300000)  // vRandom<0:NaN:Inf>
            mul r1.z, r0.w, l(0.300000)  // vRandom<2:NaN:Inf>
            mul r1.y, r0.z, l(0.300000)  // vRandom<1:NaN:Inf>
        
        #line 102
            mov r0.yzw, cb0[5].xxyz  // p<0,1,2>
            mul r1.xyz, r1.xyzx, l(10.000000, 10.000000, 10.000000, 0.000000)  // p<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf>
            mov r2.xy, l(100.000000,100.000000,0,0)  // p<6: 100f,7: 100f>
            mov r1.w, l(0)  // p<8: 0f>
            mov r2.z, l(1)  // p<9: 1u>
            mov o0.xyz, r0.yzwy  // stream<0,0,0>
            mov o1.xyz, r1.xyzx  // stream<0,0,0>
            mov o2.xy, r2.xyxx  // stream<0,0>
            mov o2.z, r1.w  // stream<0>
            mov o3.x, r2.z  // stream<0>
            emit_stream m0
        
        #line 95
            mov r0.x, l(0)  // input<8: 0f>
          endif 
        
        #line 113
          mov o0.xyz, v[0][0].xyzx  // stream<0,0,0>
          mov o1.xyz, v[0][1].xyzx  // stream<0,0,0>
          mov o2.xy, v[0][2].xyxx  // stream<0,0>
          mov o2.z, r0.x  // stream<0>
          mov o3.x, v[0][3].x  // stream<0>
          emit_stream m0
        
        #line 91
        else 
        
        #line 117
          ge r0.y, l(0.100000), r0.x
          if_nz r0.y
            mov o0.xyz, v[0][0].xyzx  // stream<0,0,0>
            mov o1.xyz, v[0][1].xyzx  // stream<0,0,0>
            mov o2.xy, v[0][2].xyxx  // stream<0,0>
            mov o2.z, r0.x  // stream<0>
            mov o3.x, v[0][3].x  // stream<0>
            emit_stream m0
          endif 
        
        #line 91
        endif 
        
        #line 87
        ret 
        // Approximately 45 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; VELOCITY.xyz; SIZE.xy; AGE.x; TYPE.x" */;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 StreamOut
    {
    }

    technique11 Draw
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // VELOCITY                 0   xyz         1     NONE  float   xyz 
                // SIZE                     0   xy          2     NONE  float   xy  
                // AGE                      0   x           3     NONE  float   x   
                // TYPE                     0   x           4     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // VELOCITY                 0   xyz         1     NONE  float   xyz 
                // SIZE                     0   xy          2     NONE  float   xy  
                // AGE                      0     z         2     NONE  float     z 
                // TYPE                     0   x           3     NONE   uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_output o3.x
                
                #line 83 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\Particle\Sun.fx"
                mov o0.xyz, v0.xyzx  // StreamOutVSScene<0,1,2>
                mov o1.xyz, v1.xyzx  // StreamOutVSScene<3,4,5>
                mov o2.xy, v2.xyxx  // StreamOutVSScene<6,7>
                mov o2.z, v3.x  // StreamOutVSScene<8>
                mov o3.x, v4.x  // StreamOutVSScene<9>
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = GS_StreamOut;
            PixelShader = NULL;
            DS_StencilRef = uint(0);
            DepthStencilState = DisableDepth;
        }

        pass p1
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // VELOCITY                 0   xyz         1     NONE  float   xyz 
                // SIZE                     0   xy          2     NONE  float   xy  
                // AGE                      0   x           3     NONE  float   x   
                // TYPE                     0   x           4     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SIZE                     0   xy          1     NONE  float   xy  
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                // TYPE                     0   x           3     NONE   uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_output o3.x
                dcl_temps 3
                
                #line 145 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\Particle\Sun.fx"
                mov r0.x, v3.x  // time<0>
                mul r0.y, r0.x, l(0.500000)
                mul r0.y, r0.x, r0.y
                mul r0.yzw, r0.yyyy, v1.xxyz
                mul r1.xyz, r0.xxxx, v1.xyzx
                add r0.yzw, r0.yyzw, r1.xxyz
                add r0.yzw, r0.yyzw, v0.xxyz  // output<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                div r0.x, r0.x, l(1.000000)
                add r0.x, r0.x, l(-0.000000)
                mul r0.x, r0.x, l(1.000000)
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mul r1.x, r0.x, l(-2.000000)
                add r1.x, r1.x, l(3.000000)
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r1.x
                mov r0.x, -r0.x
                add r1.w, r0.x, l(1.000000)  // opacity<0:[-2f,1f]>
                mov r1.xyz, l(1.000000,1.000000,0.500000,0)  // output<5: 1f,6: 1f,7: 0.5f>
                mov r1.w, r1.w  // output<8:[-2f,1f]>
                mov r2.xy, v2.xyxx  // output<3,4>
                mov r0.x, v4.x  // output<9>
                mov o2.xyzw, r1.xyzw  // DrawVS<5: 1f,6: 1f,7: 0.5f,8:[-2f,1f]>
                mov o0.xyz, r0.yzwy  // DrawVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o1.xy, r2.xyxx  // DrawVS<3,4>
                mov o3.x, r0.x  // DrawVS<9>
                ret 
                // Approximately 27 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   float3 gEyePos;                    // Offset:   64 Size:    12
                //   float3 gEmitPos;                   // Offset:   80 Size:    12 [unused]
                //   float3 gEmitDir;                   // Offset:   96 Size:    12 [unused]
                //   float gGameTime;                   // Offset:  108 Size:     4 [unused]
                //   float gTimeStep;                   // Offset:  112 Size:     4 [unused]
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float3 gAccel;                     // Offset:    0 Size:    12 [unused]
                //      = 0x00000000 0x00000000 0x00000000 
                //   float2 gQuadTexC[4];               // Offset:   16 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SIZE                     0   xy          1     NONE  float   xy  
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                // TYPE                     0   x           3     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // m0:SV_POSITION           0   xyzw        0      POS  float   xyzw
                // m0:COLOR                 0   xyzw        1     NONE  float   xyzw
                // m0:TEXCOORD              0   xy          2     NONE  float   xy  
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[5], immediateIndexed
                dcl_constantbuffer cb1[5], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].xy
                dcl_input v[1][2].xyzw
                dcl_input v[1][3].x
                dcl_temps 9
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_output o2.xy
                dcl_maxout 4
                
                #line 169 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\Particle\Sun.fx"
                if_nz v[0][3].x
                  mov r0.xyz, -v[0][0].xyzx
                  add r0.xyz, r0.xyzx, cb0[4].xyzx
                  dp3 r0.w, r0.xyzx, r0.xyzx
                  rsq r0.w, r0.w
                  mul r0.xyz, r0.wwww, r0.xyzx  // look<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r1.xyz, r0.zxyz  // look<2:NaN:Inf,0:NaN:Inf,1:NaN:Inf>
                  mul r2.xyz, r1.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)
                  mul r3.xyz, r1.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
                  mov r3.xyz, -r3.xyzx
                  add r2.xyz, r2.xyzx, r3.xyzx
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  rsq r1.w, r1.w
                  mul r2.xyz, r1.wwww, r2.xyzx  // right<0:NaN:Inf,1: 0f,2:NaN:Inf>
                  mov r3.xyz, r2.yzxy  // right<1: 0f,2:NaN:Inf,0:NaN:Inf>
                  mul r4.xyz, r1.zxyz, r3.yzxy
                  mul r1.xyz, r1.xyzx, r3.xyzx
                  mov r1.xyz, -r1.xyzx
                  add r1.xyz, r1.xyzx, r4.xyzx  // up<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 181
                  mov r2.w, l(0)
                  dp4 r3.x, r2.xyzw, cb0[0].xyzw  // wvp<0:NaN:Inf>
                  dp4 r4.x, r2.xyzw, cb0[1].xyzw  // wvp<1:NaN:Inf>
                  dp4 r5.x, r2.xyzw, cb0[2].xyzw  // wvp<2:NaN:Inf>
                  dp4 r2.x, r2.xyzw, cb0[3].xyzw  // wvp<3:NaN:Inf>
                  mov r1.w, l(0)
                  dp4 r3.y, r1.xyzw, cb0[0].xyzw  // wvp<4:NaN:Inf>
                  dp4 r4.y, r1.xyzw, cb0[1].xyzw  // wvp<5:NaN:Inf>
                  dp4 r5.y, r1.xyzw, cb0[2].xyzw  // wvp<6:NaN:Inf>
                  dp4 r2.y, r1.xyzw, cb0[3].xyzw  // wvp<7:NaN:Inf>
                  mov r0.w, l(0)
                  dp4 r3.z, r0.xyzw, cb0[0].xyzw  // wvp<8:NaN:Inf>
                  dp4 r4.z, r0.xyzw, cb0[1].xyzw  // wvp<9:NaN:Inf>
                  dp4 r5.z, r0.xyzw, cb0[2].xyzw  // wvp<10:NaN:Inf>
                  dp4 r2.z, r0.xyzw, cb0[3].xyzw  // wvp<11:NaN:Inf>
                  mov r0.xyz, v[0][0].xyzx
                  mov r0.w, l(1.000000)
                  dp4 r3.w, r0.xyzw, cb0[0].xyzw  // wvp<12:NaN:Inf>
                  dp4 r4.w, r0.xyzw, cb0[1].xyzw  // wvp<13:NaN:Inf>
                  dp4 r5.w, r0.xyzw, cb0[2].xyzw  // wvp<14:NaN:Inf>
                  dp4 r2.w, r0.xyzw, cb0[3].xyzw  // wvp<15:NaN:Inf>
                  mul r0.x, l(0.500000), v[0][1].x  // halfWidth<0:[-1.70141e+038f,1.70141e+038f]>
                  mul r0.y, l(0.500000), v[0][1].y  // halfHeight<0:[-1.70141e+038f,1.70141e+038f]>
                
                #line 187
                  mov r1.x, -r0.x
                  mov r1.y, -r0.y
                  mov r6.y, -r0.y
                  mov r0.x, -r0.x
                
                #line 196
                  mov r1.zw, l(0,0,0,1.000000)
                  dp4 r7.x, r1.xyzw, r3.xyzw  // output<0:NaN:Inf>
                  dp4 r7.y, r1.xyzw, r4.xyzw  // output<1:NaN:Inf>
                  dp4 r7.z, r1.xyzw, r5.xyzw  // output<2:NaN:Inf>
                  dp4 r7.w, r1.xyzw, r2.xyzw  // output<3:NaN:Inf>
                  mov r1.xy, cb1[1].xyxx  // output<8,9>
                  mov r8.xyzw, v[0][2].xyzw  // output<4,5,6,7>
                  mov o0.xyzw, r7.xyzw  // stream<0,0,0,0>
                  mov o1.xyzw, r8.xyzw  // stream<0,0,0,0>
                  mov o2.xy, r1.xyxx  // stream<0,0>
                  emit_stream m0
                
                #line 196
                  mul r6.x, l(0.500000), v[0][1].x
                  mov r6.zw, l(0,0,0,1.000000)
                  dp4 r1.x, r6.xyzw, r3.xyzw  // output<0:NaN:Inf>
                  dp4 r1.y, r6.xyzw, r4.xyzw  // output<1:NaN:Inf>
                  dp4 r1.z, r6.xyzw, r5.xyzw  // output<2:NaN:Inf>
                  dp4 r1.w, r6.xyzw, r2.xyzw  // output<3:NaN:Inf>
                  mov r7.xy, cb1[2].xyxx  // output<8,9>
                  mov o0.xyzw, r1.xyzw  // stream<0,0,0,0>
                  mov o1.xyzw, r8.xyzw  // stream<0,0,0,0>
                  mov o2.xy, r7.xyxx  // stream<0,0>
                  emit_stream m0
                
                #line 196
                  mul r0.y, l(0.500000), v[0][1].y
                  mov r0.zw, l(0,0,0,1.000000)
                  dp4 r1.x, r0.xyzw, r3.xyzw  // output<0:NaN:Inf>
                  dp4 r1.y, r0.xyzw, r4.xyzw  // output<1:NaN:Inf>
                  dp4 r1.z, r0.xyzw, r5.xyzw  // output<2:NaN:Inf>
                  dp4 r1.w, r0.xyzw, r2.xyzw  // output<3:NaN:Inf>
                  mov r0.xy, cb1[3].xyxx  // output<8,9>
                  mov o0.xyzw, r1.xyzw  // stream<0,0,0,0>
                  mov o1.xyzw, r8.xyzw  // stream<0,0,0,0>
                  mov o2.xy, r0.xyxx  // stream<0,0>
                  emit_stream m0
                
                #line 196
                  mul r6.y, l(0.500000), v[0][1].y
                  dp4 r0.x, r6.xyzw, r3.xyzw  // output<0:NaN:Inf>
                  dp4 r0.y, r6.xyzw, r4.xyzw  // output<1:NaN:Inf>
                  dp4 r0.z, r6.xyzw, r5.xyzw  // output<2:NaN:Inf>
                  dp4 r0.w, r6.xyzw, r2.xyzw  // output<3:NaN:Inf>
                  mov r1.xy, cb1[4].xyxx  // output<8,9>
                  mov o0.xyzw, r0.xyzw  // stream<0,0,0,0>
                  mov o1.xyzw, r8.xyzw  // stream<0,0,0,0>
                  mov o2.xy, r1.xyxx  // stream<0,0>
                  emit_stream m0
                
                #line 169
                endif 
                
                #line 166
                ret 
                // Approximately 91 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gTexArray                         texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xyzw
                dcl_input_ps linear v2.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 206 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\Particle\Sun.fx"
                mov r0.xy, v2.xyxx
                mov r0.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzx, t0.xyzw, s0
                mul o0.xyzw, r0.xyzw, v1.xyzw  // DrawPS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 5 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = AdditiveBlending;
            DS_StencilRef = uint(0);
            DepthStencilState = DisableDepth;
        }

    }

}

