//
// FX Version: fx_5_0
//
// 4 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights;        // Offset:    0, size:   64
    PointLight gPointLights[2];         // Offset:   64, size:  160
    SpotLight gSpotLights[2];           // Offset:  224, size:  192
    float3  gEyePos;                    // Offset:  416, size:   12
}

cbuffer cbPerObject
{
    Material gMaterial;                 // Offset:    0, size:   64
    float4x4 gWorld;                    // Offset:   64, size:   64
    float4x4 gView;                     // Offset:  128, size:   64
    float4x4 gProj;                     // Offset:  192, size:   64
    float4x4 gWorldInvTranspose;        // Offset:  256, size:   64
}

cbuffer cbSkin
{
    float4x4 gBoneTransforms[96];       // Offset:    0, size: 6144
}

cbuffer cbFixed
{
    float   lightAddScale = 0.5;        // Offset:    0, size:    4
}

//
// 7 local object(s)
//
Texture2D gDiffMap;
Texture2D gNormMap;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
RasterizerState Wireframe
{
    FillMode = uint(WIREFRAME /* 2 */);
    CullMode = uint(NONE /* 1 */);
    FrontCounterClockwise = bool(FALSE /* false */);
};
RasterizerState Solidframe
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(NONE /* 1 */);
    FrontCounterClockwise = bool(FALSE /* false */);
};
DepthStencilState NoDepthWrites
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ALL /* 1 */);
    DepthFunc = uint(LESS_EQUAL /* 4 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 6 technique(s)
    //
    technique11 Solid
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //
                //   } gMaterial;                       // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64
                //   float4x4 gView;                    // Offset:  128 Size:    64
                //   float4x4 gProj;                    // Offset:  192 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_temps 6
                
                #line 82 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                mul r0.xyzw, cb0[8].xyzw, cb0[12].xxxx
                mul r1.xyzw, cb0[9].xyzw, cb0[12].yyyy
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, cb0[10].xyzw, cb0[12].zzzz
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, cb0[11].xyzw, cb0[12].wwww
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, cb0[8].xyzw, cb0[13].xxxx
                mul r2.xyzw, cb0[9].xyzw, cb0[13].yyyy
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r2.xyzw, cb0[10].xyzw, cb0[13].zzzz
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r2.xyzw, cb0[11].xyzw, cb0[13].wwww
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r2.xyzw, cb0[8].xyzw, cb0[14].xxxx
                mul r3.xyzw, cb0[9].xyzw, cb0[14].yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[10].xyzw, cb0[14].zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[11].xyzw, cb0[14].wwww
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[8].xyzw, cb0[15].xxxx
                mul r4.xyzw, cb0[9].xyzw, cb0[15].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[10].xyzw, cb0[15].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[11].xyzw, cb0[15].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, r0.xxxx, cb0[4].xyzw
                mul r5.xyzw, r0.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r0.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r0.xyzw, r0.wwww, cb0[7].xyzw
                add r0.xyzw, r0.xyzw, r4.xyzw  // wvp<0:NaN:Inf,4:NaN:Inf,8:NaN:Inf,12:NaN:Inf>
                mul r4.xyzw, r1.xxxx, cb0[4].xyzw
                mul r5.xyzw, r1.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r1.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r1.xyzw, r1.wwww, cb0[7].xyzw
                add r1.xyzw, r1.xyzw, r4.xyzw  // wvp<1:NaN:Inf,5:NaN:Inf,9:NaN:Inf,13:NaN:Inf>
                mul r4.xyzw, r2.xxxx, cb0[4].xyzw
                mul r5.xyzw, r2.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r2.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r2.xyzw, r2.wwww, cb0[7].xyzw
                add r2.xyzw, r2.xyzw, r4.xyzw  // wvp<2:NaN:Inf,6:NaN:Inf,10:NaN:Inf,14:NaN:Inf>
                mul r4.xyzw, r3.xxxx, cb0[4].xyzw
                mul r5.xyzw, r3.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r3.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r3.xyzw, r3.wwww, cb0[7].xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw  // wvp<3:NaN:Inf,7:NaN:Inf,11:NaN:Inf,15:NaN:Inf>
                mov r4.xyz, v0.xyzx
                mov r4.w, l(1.000000)
                dp4 r0.x, r4.xyzw, r0.xyzw  // output<0:NaN:Inf>
                dp4 r0.y, r4.xyzw, r1.xyzw  // output<1:NaN:Inf>
                dp4 r0.z, r4.xyzw, r2.xyzw  // output<2:NaN:Inf>
                dp4 r0.w, r4.xyzw, r3.xyzw  // output<3:NaN:Inf>
                dp4 r1.x, r4.xyzw, cb0[4].xyzw  // output<4:NaN:Inf>
                dp4 r1.y, r4.xyzw, cb0[5].xyzw  // output<5:NaN:Inf>
                dp4 r1.z, r4.xyzw, cb0[6].xyzw  // output<6:NaN:Inf>
                
                #line 89
                dp3 r2.x, v1.xyzx, cb0[16].xyzx  // output<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[17].xyzx  // output<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[18].xyzx  // output<9:NaN:Inf>
                dp4 r3.x, v3.xyzw, cb0[4].xyzw  // output<12:NaN:Inf>
                dp4 r3.y, v3.xyzw, cb0[5].xyzw  // output<13:NaN:Inf>
                dp4 r3.z, v3.xyzw, cb0[6].xyzw  // output<14:NaN:Inf>
                dp4 r3.w, v3.xyzw, cb0[7].xyzw  // output<15:NaN:Inf>
                mov r4.xy, v2.xyxx  // output<10,11>
                mov o0.xyzw, r0.xyzw  // VSScene<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o4.xyzw, r3.xyzw  // VSScene<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VSScene<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VSScene<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VSScene<10,11>
                ret 
                // Approximately 79 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffMap                          texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 139 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 145
                mov o0.xyzw, r0.xyzw  // PSScene<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 3 instruction slots used
                            
            };
            RasterizerState = Solidframe;
        }

    }

    technique11 SolidSkin
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //
                //   } gMaterial;                       // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64
                //   float4x4 gView;                    // Offset:  128 Size:    64
                //   float4x4 gProj;                    // Offset:  192 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbSkin
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbSkin                            cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_temps 9
                dcl_indexableTemp x0[4], 4
                
                #line 101 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                mov x0[0].x, v4.x  // weights<0>
                mov x0[1].x, v4.y  // weights<1>
                mov x0[2].x, v4.z  // weights<2>
                mov r0.x, -v4.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, -v4.y
                add r0.x, r0.y, r0.x
                mov r0.y, -v4.z
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x  // weights<3>
                
                #line 110
                mov r0.xyz, l(0,0,0,0)  // pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, l(0,0,0,0)  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // tangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, l(0)  // i<0>
                loop 
                  ilt r2.w, r1.w, l(4)
                  breakc_z r2.w
                  mov r2.w, r1.w
                  mov r3.x, x0[r2.w + 0].x  // weights<0:Inf>
                  and r4.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r2.w, r3.z, r3.y
                  imul null, r2.w, r2.w, l(4)
                  mov r4.xyz, v0.xyzx
                  mov r4.w, l(1.000000)
                  dp4 r5.x, r4.xyzw, cb1[r2.w + 0].xyzw
                  dp4 r5.y, r4.xyzw, cb1[r2.w + 1].xyzw
                  dp4 r5.z, r4.xyzw, cb1[r2.w + 2].xyzw
                  mul r3.yzw, r3.xxxx, r5.xxyz
                  add r0.xyz, r0.xyzx, r3.yzwy  // pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v1.xyzx, cb1[r2.w + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb1[r2.w + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb1[r2.w + 2].xyzx
                  mul r3.yzw, r3.xxxx, r4.xxyz
                  add r1.xyz, r1.xyzx, r3.yzwy  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v3.xyzx, cb1[r2.w + 0].xyzx
                  dp3 r4.y, v3.xyzx, cb1[r2.w + 1].xyzx
                  dp3 r4.z, v3.xyzx, cb1[r2.w + 2].xyzx
                  mul r3.xyz, r3.xxxx, r4.xyzx
                  add r2.xyz, r2.xyzx, r3.xyzx  // tangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 110
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 117
                mul r3.xyzw, cb0[8].xyzw, cb0[12].xxxx
                mul r4.xyzw, cb0[9].xyzw, cb0[12].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[10].xyzw, cb0[12].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[11].xyzw, cb0[12].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[8].xyzw, cb0[13].xxxx
                mul r5.xyzw, cb0[9].xyzw, cb0[13].yyyy
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[10].xyzw, cb0[13].zzzz
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[11].xyzw, cb0[13].wwww
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[8].xyzw, cb0[14].xxxx
                mul r6.xyzw, cb0[9].xyzw, cb0[14].yyyy
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[10].xyzw, cb0[14].zzzz
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[11].xyzw, cb0[14].wwww
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[8].xyzw, cb0[15].xxxx
                mul r7.xyzw, cb0[9].xyzw, cb0[15].yyyy
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, cb0[10].xyzw, cb0[15].zzzz
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, cb0[11].xyzw, cb0[15].wwww
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, r3.xxxx, cb0[4].xyzw
                mul r8.xyzw, r3.yyyy, cb0[5].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, r3.zzzz, cb0[6].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r3.xyzw, r3.wwww, cb0[7].xyzw
                add r3.xyzw, r3.xyzw, r7.xyzw  // wvp<0:NaN:Inf,4:NaN:Inf,8:NaN:Inf,12:NaN:Inf>
                mul r7.xyzw, r4.xxxx, cb0[4].xyzw
                mul r8.xyzw, r4.yyyy, cb0[5].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, r4.zzzz, cb0[6].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r4.xyzw, r4.wwww, cb0[7].xyzw
                add r4.xyzw, r4.xyzw, r7.xyzw  // wvp<1:NaN:Inf,5:NaN:Inf,9:NaN:Inf,13:NaN:Inf>
                mul r7.xyzw, r5.xxxx, cb0[4].xyzw
                mul r8.xyzw, r5.yyyy, cb0[5].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, r5.zzzz, cb0[6].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r5.xyzw, r5.wwww, cb0[7].xyzw
                add r5.xyzw, r5.xyzw, r7.xyzw  // wvp<2:NaN:Inf,6:NaN:Inf,10:NaN:Inf,14:NaN:Inf>
                mul r7.xyzw, r6.xxxx, cb0[4].xyzw
                mul r8.xyzw, r6.yyyy, cb0[5].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, r6.zzzz, cb0[6].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r6.xyzw, r6.wwww, cb0[7].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw  // wvp<3:NaN:Inf,7:NaN:Inf,11:NaN:Inf,15:NaN:Inf>
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, r3.xyzw  // output<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, r4.xyzw  // output<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, r5.xyzw  // output<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, r6.xyzw  // output<3:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[4].xyzw  // output<4:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[5].xyzw  // output<5:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[6].xyzw  // output<6:NaN:Inf>
                
                #line 124
                dp3 r0.x, r1.xyzx, cb0[16].xyzx  // output<7:NaN:Inf>
                dp3 r0.y, r1.xyzx, cb0[17].xyzx  // output<8:NaN:Inf>
                dp3 r0.z, r1.xyzx, cb0[18].xyzx  // output<9:NaN:Inf>
                dp3 r1.x, r2.xyzx, cb0[16].xyzx  // output<12:NaN:Inf>
                dp3 r1.y, r2.xyzx, cb0[17].xyzx  // output<13:NaN:Inf>
                dp3 r1.z, r2.xyzx, cb0[18].xyzx  // output<14:NaN:Inf>
                mov r1.w, v3.w  // output<15>
                mov r2.xy, v2.xyxx  // output<10,11>
                mov o0.xyzw, r3.xyzw  // SkinVSScene<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o4.xyzw, r1.xyzw  // SkinVSScene<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15>
                mov o1.xyz, r4.xyzx  // SkinVSScene<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r0.xyzx  // SkinVSScene<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r2.xyxx  // SkinVSScene<10,11>
                ret 
                // Approximately 120 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffMap                          texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 139 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 145
                mov o0.xyzw, r0.xyzw  // PSScene<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 3 instruction slots used
                            
            };
            RasterizerState = Solidframe;
        }

    }

    technique11 SolidAlpha
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //
                //   } gMaterial;                       // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64
                //   float4x4 gView;                    // Offset:  128 Size:    64
                //   float4x4 gProj;                    // Offset:  192 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_temps 6
                
                #line 82 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                mul r0.xyzw, cb0[8].xyzw, cb0[12].xxxx
                mul r1.xyzw, cb0[9].xyzw, cb0[12].yyyy
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, cb0[10].xyzw, cb0[12].zzzz
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, cb0[11].xyzw, cb0[12].wwww
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, cb0[8].xyzw, cb0[13].xxxx
                mul r2.xyzw, cb0[9].xyzw, cb0[13].yyyy
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r2.xyzw, cb0[10].xyzw, cb0[13].zzzz
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r2.xyzw, cb0[11].xyzw, cb0[13].wwww
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r2.xyzw, cb0[8].xyzw, cb0[14].xxxx
                mul r3.xyzw, cb0[9].xyzw, cb0[14].yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[10].xyzw, cb0[14].zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[11].xyzw, cb0[14].wwww
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[8].xyzw, cb0[15].xxxx
                mul r4.xyzw, cb0[9].xyzw, cb0[15].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[10].xyzw, cb0[15].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[11].xyzw, cb0[15].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, r0.xxxx, cb0[4].xyzw
                mul r5.xyzw, r0.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r0.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r0.xyzw, r0.wwww, cb0[7].xyzw
                add r0.xyzw, r0.xyzw, r4.xyzw  // wvp<0:NaN:Inf,4:NaN:Inf,8:NaN:Inf,12:NaN:Inf>
                mul r4.xyzw, r1.xxxx, cb0[4].xyzw
                mul r5.xyzw, r1.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r1.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r1.xyzw, r1.wwww, cb0[7].xyzw
                add r1.xyzw, r1.xyzw, r4.xyzw  // wvp<1:NaN:Inf,5:NaN:Inf,9:NaN:Inf,13:NaN:Inf>
                mul r4.xyzw, r2.xxxx, cb0[4].xyzw
                mul r5.xyzw, r2.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r2.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r2.xyzw, r2.wwww, cb0[7].xyzw
                add r2.xyzw, r2.xyzw, r4.xyzw  // wvp<2:NaN:Inf,6:NaN:Inf,10:NaN:Inf,14:NaN:Inf>
                mul r4.xyzw, r3.xxxx, cb0[4].xyzw
                mul r5.xyzw, r3.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r3.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r3.xyzw, r3.wwww, cb0[7].xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw  // wvp<3:NaN:Inf,7:NaN:Inf,11:NaN:Inf,15:NaN:Inf>
                mov r4.xyz, v0.xyzx
                mov r4.w, l(1.000000)
                dp4 r0.x, r4.xyzw, r0.xyzw  // output<0:NaN:Inf>
                dp4 r0.y, r4.xyzw, r1.xyzw  // output<1:NaN:Inf>
                dp4 r0.z, r4.xyzw, r2.xyzw  // output<2:NaN:Inf>
                dp4 r0.w, r4.xyzw, r3.xyzw  // output<3:NaN:Inf>
                dp4 r1.x, r4.xyzw, cb0[4].xyzw  // output<4:NaN:Inf>
                dp4 r1.y, r4.xyzw, cb0[5].xyzw  // output<5:NaN:Inf>
                dp4 r1.z, r4.xyzw, cb0[6].xyzw  // output<6:NaN:Inf>
                
                #line 89
                dp3 r2.x, v1.xyzx, cb0[16].xyzx  // output<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[17].xyzx  // output<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[18].xyzx  // output<9:NaN:Inf>
                dp4 r3.x, v3.xyzw, cb0[4].xyzw  // output<12:NaN:Inf>
                dp4 r3.y, v3.xyzw, cb0[5].xyzw  // output<13:NaN:Inf>
                dp4 r3.z, v3.xyzw, cb0[6].xyzw  // output<14:NaN:Inf>
                dp4 r3.w, v3.xyzw, cb0[7].xyzw  // output<15:NaN:Inf>
                mov r4.xy, v2.xyxx  // output<10,11>
                mov o0.xyzw, r0.xyzw  // VSScene<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o4.xyzw, r3.xyzw  // VSScene<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VSScene<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VSScene<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VSScene<10,11>
                ret 
                // Approximately 79 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffMap                          texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 139 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 142
                add r1.x, r0.w, l(-0.100000)
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard r1.x
                
                #line 145
                mov o0.xyzw, r0.xyzw  // PSScene<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 7 instruction slots used
                            
            };
            RasterizerState = Solidframe;
        }

    }

    technique11 SolidAlphaSkin
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //
                //   } gMaterial;                       // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64
                //   float4x4 gView;                    // Offset:  128 Size:    64
                //   float4x4 gProj;                    // Offset:  192 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbSkin
                // {
                //
                //   float4x4 gBoneTransforms[96];      // Offset:    0 Size:  6144
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbSkin                            cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                // WEIGHTS                  0   xyz         4     NONE  float   xyz 
                // BONEINDICES              0   xyzw        5     NONE   uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_immediateConstantBuffer { { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_constantbuffer cb1[383], dynamicIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_input v4.xyz
                dcl_input v5.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_temps 9
                dcl_indexableTemp x0[4], 4
                
                #line 101 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                mov x0[0].x, v4.x  // weights<0>
                mov x0[1].x, v4.y  // weights<1>
                mov x0[2].x, v4.z  // weights<2>
                mov r0.x, -v4.x
                add r0.x, r0.x, l(1.000000)
                mov r0.y, -v4.y
                add r0.x, r0.y, r0.x
                mov r0.y, -v4.z
                add r0.x, r0.y, r0.x
                mov x0[3].x, r0.x  // weights<3>
                
                #line 110
                mov r0.xyz, l(0,0,0,0)  // pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, l(0,0,0,0)  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, l(0,0,0,0)  // tangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, l(0)  // i<0>
                loop 
                  ilt r2.w, r1.w, l(4)
                  breakc_z r2.w
                  mov r2.w, r1.w
                  mov r3.x, x0[r2.w + 0].x  // weights<0:Inf>
                  and r4.xyzw, v5.xyzw, icb[r2.w + 0].xyzw
                  or r3.yz, r4.yywy, r4.xxzx
                  or r2.w, r3.z, r3.y
                  imul null, r2.w, r2.w, l(4)
                  mov r4.xyz, v0.xyzx
                  mov r4.w, l(1.000000)
                  dp4 r5.x, r4.xyzw, cb1[r2.w + 0].xyzw
                  dp4 r5.y, r4.xyzw, cb1[r2.w + 1].xyzw
                  dp4 r5.z, r4.xyzw, cb1[r2.w + 2].xyzw
                  mul r3.yzw, r3.xxxx, r5.xxyz
                  add r0.xyz, r0.xyzx, r3.yzwy  // pos<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v1.xyzx, cb1[r2.w + 0].xyzx
                  dp3 r4.y, v1.xyzx, cb1[r2.w + 1].xyzx
                  dp3 r4.z, v1.xyzx, cb1[r2.w + 2].xyzx
                  mul r3.yzw, r3.xxxx, r4.xxyz
                  add r1.xyz, r1.xyzx, r3.yzwy  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.x, v3.xyzx, cb1[r2.w + 0].xyzx
                  dp3 r4.y, v3.xyzx, cb1[r2.w + 1].xyzx
                  dp3 r4.z, v3.xyzx, cb1[r2.w + 2].xyzx
                  mul r3.xyz, r3.xxxx, r4.xyzx
                  add r2.xyz, r2.xyzx, r3.xyzx  // tangent<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 110
                  iadd r1.w, r1.w, l(1)  // i<0>
                endloop 
                
                #line 117
                mul r3.xyzw, cb0[8].xyzw, cb0[12].xxxx
                mul r4.xyzw, cb0[9].xyzw, cb0[12].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[10].xyzw, cb0[12].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[11].xyzw, cb0[12].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[8].xyzw, cb0[13].xxxx
                mul r5.xyzw, cb0[9].xyzw, cb0[13].yyyy
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[10].xyzw, cb0[13].zzzz
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[11].xyzw, cb0[13].wwww
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[8].xyzw, cb0[14].xxxx
                mul r6.xyzw, cb0[9].xyzw, cb0[14].yyyy
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[10].xyzw, cb0[14].zzzz
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[11].xyzw, cb0[14].wwww
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[8].xyzw, cb0[15].xxxx
                mul r7.xyzw, cb0[9].xyzw, cb0[15].yyyy
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, cb0[10].xyzw, cb0[15].zzzz
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, cb0[11].xyzw, cb0[15].wwww
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, r3.xxxx, cb0[4].xyzw
                mul r8.xyzw, r3.yyyy, cb0[5].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, r3.zzzz, cb0[6].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r3.xyzw, r3.wwww, cb0[7].xyzw
                add r3.xyzw, r3.xyzw, r7.xyzw  // wvp<0:NaN:Inf,4:NaN:Inf,8:NaN:Inf,12:NaN:Inf>
                mul r7.xyzw, r4.xxxx, cb0[4].xyzw
                mul r8.xyzw, r4.yyyy, cb0[5].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, r4.zzzz, cb0[6].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r4.xyzw, r4.wwww, cb0[7].xyzw
                add r4.xyzw, r4.xyzw, r7.xyzw  // wvp<1:NaN:Inf,5:NaN:Inf,9:NaN:Inf,13:NaN:Inf>
                mul r7.xyzw, r5.xxxx, cb0[4].xyzw
                mul r8.xyzw, r5.yyyy, cb0[5].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, r5.zzzz, cb0[6].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r5.xyzw, r5.wwww, cb0[7].xyzw
                add r5.xyzw, r5.xyzw, r7.xyzw  // wvp<2:NaN:Inf,6:NaN:Inf,10:NaN:Inf,14:NaN:Inf>
                mul r7.xyzw, r6.xxxx, cb0[4].xyzw
                mul r8.xyzw, r6.yyyy, cb0[5].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, r6.zzzz, cb0[6].xyzw
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r6.xyzw, r6.wwww, cb0[7].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw  // wvp<3:NaN:Inf,7:NaN:Inf,11:NaN:Inf,15:NaN:Inf>
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, r3.xyzw  // output<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, r4.xyzw  // output<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, r5.xyzw  // output<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, r6.xyzw  // output<3:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[4].xyzw  // output<4:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[5].xyzw  // output<5:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[6].xyzw  // output<6:NaN:Inf>
                
                #line 124
                dp3 r0.x, r1.xyzx, cb0[16].xyzx  // output<7:NaN:Inf>
                dp3 r0.y, r1.xyzx, cb0[17].xyzx  // output<8:NaN:Inf>
                dp3 r0.z, r1.xyzx, cb0[18].xyzx  // output<9:NaN:Inf>
                dp3 r1.x, r2.xyzx, cb0[16].xyzx  // output<12:NaN:Inf>
                dp3 r1.y, r2.xyzx, cb0[17].xyzx  // output<13:NaN:Inf>
                dp3 r1.z, r2.xyzx, cb0[18].xyzx  // output<14:NaN:Inf>
                mov r1.w, v3.w  // output<15>
                mov r2.xy, v2.xyxx  // output<10,11>
                mov o0.xyzw, r3.xyzw  // SkinVSScene<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o4.xyzw, r1.xyzw  // SkinVSScene<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15>
                mov o1.xyz, r4.xyzx  // SkinVSScene<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r0.xyzx  // SkinVSScene<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r2.xyxx  // SkinVSScene<10,11>
                ret 
                // Approximately 120 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffMap                          texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 139 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 142
                add r1.x, r0.w, l(-0.100000)
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard r1.x
                
                #line 145
                mov o0.xyzw, r0.xyzw  // PSScene<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 7 instruction slots used
                            
            };
            RasterizerState = Solidframe;
        }

    }

    technique11 Wire
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //
                //   } gMaterial;                       // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64
                //   float4x4 gView;                    // Offset:  128 Size:    64
                //   float4x4 gProj;                    // Offset:  192 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_temps 6
                
                #line 82 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                mul r0.xyzw, cb0[8].xyzw, cb0[12].xxxx
                mul r1.xyzw, cb0[9].xyzw, cb0[12].yyyy
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, cb0[10].xyzw, cb0[12].zzzz
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, cb0[11].xyzw, cb0[12].wwww
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, cb0[8].xyzw, cb0[13].xxxx
                mul r2.xyzw, cb0[9].xyzw, cb0[13].yyyy
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r2.xyzw, cb0[10].xyzw, cb0[13].zzzz
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r2.xyzw, cb0[11].xyzw, cb0[13].wwww
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r2.xyzw, cb0[8].xyzw, cb0[14].xxxx
                mul r3.xyzw, cb0[9].xyzw, cb0[14].yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[10].xyzw, cb0[14].zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[11].xyzw, cb0[14].wwww
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[8].xyzw, cb0[15].xxxx
                mul r4.xyzw, cb0[9].xyzw, cb0[15].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[10].xyzw, cb0[15].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[11].xyzw, cb0[15].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, r0.xxxx, cb0[4].xyzw
                mul r5.xyzw, r0.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r0.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r0.xyzw, r0.wwww, cb0[7].xyzw
                add r0.xyzw, r0.xyzw, r4.xyzw  // wvp<0:NaN:Inf,4:NaN:Inf,8:NaN:Inf,12:NaN:Inf>
                mul r4.xyzw, r1.xxxx, cb0[4].xyzw
                mul r5.xyzw, r1.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r1.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r1.xyzw, r1.wwww, cb0[7].xyzw
                add r1.xyzw, r1.xyzw, r4.xyzw  // wvp<1:NaN:Inf,5:NaN:Inf,9:NaN:Inf,13:NaN:Inf>
                mul r4.xyzw, r2.xxxx, cb0[4].xyzw
                mul r5.xyzw, r2.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r2.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r2.xyzw, r2.wwww, cb0[7].xyzw
                add r2.xyzw, r2.xyzw, r4.xyzw  // wvp<2:NaN:Inf,6:NaN:Inf,10:NaN:Inf,14:NaN:Inf>
                mul r4.xyzw, r3.xxxx, cb0[4].xyzw
                mul r5.xyzw, r3.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r3.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r3.xyzw, r3.wwww, cb0[7].xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw  // wvp<3:NaN:Inf,7:NaN:Inf,11:NaN:Inf,15:NaN:Inf>
                mov r4.xyz, v0.xyzx
                mov r4.w, l(1.000000)
                dp4 r0.x, r4.xyzw, r0.xyzw  // output<0:NaN:Inf>
                dp4 r0.y, r4.xyzw, r1.xyzw  // output<1:NaN:Inf>
                dp4 r0.z, r4.xyzw, r2.xyzw  // output<2:NaN:Inf>
                dp4 r0.w, r4.xyzw, r3.xyzw  // output<3:NaN:Inf>
                dp4 r1.x, r4.xyzw, cb0[4].xyzw  // output<4:NaN:Inf>
                dp4 r1.y, r4.xyzw, cb0[5].xyzw  // output<5:NaN:Inf>
                dp4 r1.z, r4.xyzw, cb0[6].xyzw  // output<6:NaN:Inf>
                
                #line 89
                dp3 r2.x, v1.xyzx, cb0[16].xyzx  // output<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[17].xyzx  // output<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[18].xyzx  // output<9:NaN:Inf>
                dp4 r3.x, v3.xyzw, cb0[4].xyzw  // output<12:NaN:Inf>
                dp4 r3.y, v3.xyzw, cb0[5].xyzw  // output<13:NaN:Inf>
                dp4 r3.z, v3.xyzw, cb0[6].xyzw  // output<14:NaN:Inf>
                dp4 r3.w, v3.xyzw, cb0[7].xyzw  // output<15:NaN:Inf>
                mov r4.xy, v2.xyxx  // output<10,11>
                mov o0.xyzw, r0.xyzw  // VSScene<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o4.xyzw, r3.xyzw  // VSScene<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VSScene<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VSScene<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VSScene<10,11>
                ret 
                // Approximately 79 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float       
                // TANGENT                  0   xyzw        4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_output o0.xyzw
                
                #line 145 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                mov o0.xyzw, l(1.000000,0,0,1.000000)  // PSScene<0: 1f,1: 0f,2: 0f,3: 1f>
                ret 
                // Approximately 2 instruction slots used
                            
            };
            RasterizerState = Wireframe;
        }

    }

    technique11 AllLights
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //
                //   } gMaterial;                       // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorld;                   // Offset:   64 Size:    64
                //   float4x4 gView;                    // Offset:  128 Size:    64
                //   float4x4 gProj;                    // Offset:  192 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TANGENT                  0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.xyzw
                dcl_temps 6
                
                #line 82 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                mul r0.xyzw, cb0[8].xyzw, cb0[12].xxxx
                mul r1.xyzw, cb0[9].xyzw, cb0[12].yyyy
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, cb0[10].xyzw, cb0[12].zzzz
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, cb0[11].xyzw, cb0[12].wwww
                add r0.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, cb0[8].xyzw, cb0[13].xxxx
                mul r2.xyzw, cb0[9].xyzw, cb0[13].yyyy
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r2.xyzw, cb0[10].xyzw, cb0[13].zzzz
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r2.xyzw, cb0[11].xyzw, cb0[13].wwww
                add r1.xyzw, r1.xyzw, r2.xyzw
                mul r2.xyzw, cb0[8].xyzw, cb0[14].xxxx
                mul r3.xyzw, cb0[9].xyzw, cb0[14].yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[10].xyzw, cb0[14].zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[11].xyzw, cb0[14].wwww
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[8].xyzw, cb0[15].xxxx
                mul r4.xyzw, cb0[9].xyzw, cb0[15].yyyy
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[10].xyzw, cb0[15].zzzz
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[11].xyzw, cb0[15].wwww
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, r0.xxxx, cb0[4].xyzw
                mul r5.xyzw, r0.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r0.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r0.xyzw, r0.wwww, cb0[7].xyzw
                add r0.xyzw, r0.xyzw, r4.xyzw  // wvp<0:NaN:Inf,4:NaN:Inf,8:NaN:Inf,12:NaN:Inf>
                mul r4.xyzw, r1.xxxx, cb0[4].xyzw
                mul r5.xyzw, r1.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r1.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r1.xyzw, r1.wwww, cb0[7].xyzw
                add r1.xyzw, r1.xyzw, r4.xyzw  // wvp<1:NaN:Inf,5:NaN:Inf,9:NaN:Inf,13:NaN:Inf>
                mul r4.xyzw, r2.xxxx, cb0[4].xyzw
                mul r5.xyzw, r2.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r2.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r2.xyzw, r2.wwww, cb0[7].xyzw
                add r2.xyzw, r2.xyzw, r4.xyzw  // wvp<2:NaN:Inf,6:NaN:Inf,10:NaN:Inf,14:NaN:Inf>
                mul r4.xyzw, r3.xxxx, cb0[4].xyzw
                mul r5.xyzw, r3.yyyy, cb0[5].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, r3.zzzz, cb0[6].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r3.xyzw, r3.wwww, cb0[7].xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw  // wvp<3:NaN:Inf,7:NaN:Inf,11:NaN:Inf,15:NaN:Inf>
                mov r4.xyz, v0.xyzx
                mov r4.w, l(1.000000)
                dp4 r0.x, r4.xyzw, r0.xyzw  // output<0:NaN:Inf>
                dp4 r0.y, r4.xyzw, r1.xyzw  // output<1:NaN:Inf>
                dp4 r0.z, r4.xyzw, r2.xyzw  // output<2:NaN:Inf>
                dp4 r0.w, r4.xyzw, r3.xyzw  // output<3:NaN:Inf>
                dp4 r1.x, r4.xyzw, cb0[4].xyzw  // output<4:NaN:Inf>
                dp4 r1.y, r4.xyzw, cb0[5].xyzw  // output<5:NaN:Inf>
                dp4 r1.z, r4.xyzw, cb0[6].xyzw  // output<6:NaN:Inf>
                
                #line 89
                dp3 r2.x, v1.xyzx, cb0[16].xyzx  // output<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[17].xyzx  // output<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[18].xyzx  // output<9:NaN:Inf>
                dp4 r3.x, v3.xyzw, cb0[4].xyzw  // output<12:NaN:Inf>
                dp4 r3.y, v3.xyzw, cb0[5].xyzw  // output<13:NaN:Inf>
                dp4 r3.z, v3.xyzw, cb0[6].xyzw  // output<14:NaN:Inf>
                dp4 r3.w, v3.xyzw, cb0[7].xyzw  // output<15:NaN:Inf>
                mov r4.xy, v2.xyxx  // output<10,11>
                mov o0.xyzw, r0.xyzw  // VSScene<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o4.xyzw, r3.xyzw  // VSScene<12:NaN:Inf,13:NaN:Inf,14:NaN:Inf,15:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VSScene<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VSScene<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VSScene<10,11>
                ret 
                // Approximately 79 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float Padding;                 // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Attenuation;            // Offset:  128
                //       float Padding;                 // Offset:  140
                //
                //   } gPointLights[2];                 // Offset:   64 Size:   160
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  224
                //       float4 Diffuse;                // Offset:  240
                //       float4 Specular;               // Offset:  256
                //       float3 Position;               // Offset:  272
                //       float Range;                   // Offset:  284
                //       float3 Direction;              // Offset:  288
                //       float Spot;                    // Offset:  300
                //       float3 Attenuation;            // Offset:  304
                //       float Padding;                 // Offset:  316
                //
                //   } gSpotLights[2];                  // Offset:  224 Size:   192
                //   float3 gEyePos;                    // Offset:  416 Size:    12
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float4 Reflect;                // Offset:   48
                //
                //   } gMaterial;                       // Offset:    0 Size:    64
                //   float4x4 gWorld;                   // Offset:   64 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:  128 Size:    64 [unused]
                //   float4x4 gProj;                    // Offset:  192 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float lightAddScale;               // Offset:    0 Size:     4
                //      = 0x3f000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gDiffMap                          texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                // cbFixed                           cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                // TANGENT                  0   xyzw        4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[27], immediateIndexed
                dcl_constantbuffer cb1[3], immediateIndexed
                dcl_constantbuffer cb2[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 18
                
                #line 155 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // input<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 159
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v3.xyxx, t0.xyzw, s0  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 162
                add r0.w, r1.w, l(-0.100000)
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard r0.w
                
                #line 165
                nop 
                
                #line 175
                mov r2.xyz, -v1.xyzx
                add r2.xyz, r2.xyzx, cb0[26].xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r2.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 185
                nop 
                mov r3.xyz, cb1[0].xyzx  // mat<0,1,2>
                mov r4.xyz, cb1[1].xyzx  // mat<4,5,6>
                mov r5.xyzw, cb1[2].xyzw  // mat<8,9,10,11>
                mov r6.xyz, cb0[0].xyzx  // light<0,1,2>
                mov r7.xyz, cb0[1].xyzx  // light<4,5,6>
                mov r8.xyz, cb0[2].xyzx  // light<8,9,10>
                mov r9.xyz, cb0[3].xyzx  // light<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 75 "../LightDef.fx"
                mov r9.xyz, -r9.xyzx  // lightVec<0,1,2>
                mul r6.xyz, r3.xyzx, r6.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                dp3 r0.w, r9.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r2.w, l(0.000000), r0.w
                mov r9.xyz, -r9.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r10.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r3.w, r9.xyzx, r2.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r5.w
                exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                mul r9.xyz, r4.xyzx, r0.wwww
                mul r7.xyz, r7.xyzx, r9.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r9.xyz, r5.xyzx, r3.wwww
                mul r8.xyz, r8.xyzx, r9.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 82
                movc r7.xyz, r2.wwww, r7.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                movc r8.xyz, r2.wwww, r8.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 185 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                mov r6.xyz, r6.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r7.xyz, r7.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r8.xyz, r8.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf>
                add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r8.xyz, r8.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 196
                nop 
                mov r9.xyz, cb0[4].xyzx  // light<0,1,2>
                mov r10.xyz, cb0[5].xyzx  // light<4,5,6>
                mov r11.xyz, cb0[6].xyzx  // light<8,9,10>
                mov r12.xyz, cb0[7].xyzx  // light<12,13,14>
                mov r0.w, cb0[7].w  // light<15>
                mov r13.xyz, cb0[8].xyzx  // light<16,17,18>
                mov r14.xyz, v1.xyzx  // pos<0,1,2>
                
                #line 112 "../LightDef.fx"
                mov r14.xyz, -r14.xyzx
                add r12.xyz, r12.xyzx, r14.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 115
                dp3 r2.w, r12.xyzx, r12.xyzx
                sqrt r15.y, r2.w  // dist<0:NaN:Inf>
                
                #line 118
                lt r0.w, r0.w, r15.y
                
                #line 122
                if_z r0.w
                  div r12.xyz, r12.xyzx, r15.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 125
                  mul r9.xyz, r3.xyzx, r9.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 128
                  dp3 r0.w, r12.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 131
                  lt r2.w, l(0.000000), r0.w
                  mov r12.xyz, -r12.xyzx
                  dp3 r3.w, r12.xyzx, r0.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r16.xyz, r0.xyzx, r3.wwww
                  add r12.xyz, r12.xyzx, r16.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r12.xyzx, r2.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r5.w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r12.xyz, r4.xyzx, r0.wwww
                  mul r10.xyz, r10.xyzx, r12.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r12.xyz, r5.xyzx, r3.wwww
                  mul r11.xyz, r11.xyzx, r12.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                  movc r10.xyz, r2.wwww, r10.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r11.xyz, r2.wwww, r11.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  mul r15.z, r15.y, r15.y
                  mov r15.x, l(1.000000)
                  dp3 r0.w, r13.xyzx, r15.xyzx
                  div r0.w, l(1.000000), r0.w  // atten<0:NaN:Inf>
                  mul r10.xyz, r0.wwww, r10.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r11.xyz, r0.wwww, r11.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 122
                else 
                  mov r9.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r10.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r11.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 196 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                mov r9.xyz, r9.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r10.xyz, r10.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r11.xyz, r11.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r6.xyz, r6.xyzx, r9.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r7.xyz, r7.xyzx, r10.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r8.xyz, r8.xyzx, r11.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 196
                nop 
                mov r9.xyz, cb0[9].xyzx  // light<0,1,2>
                mov r10.xyz, cb0[10].xyzx  // light<4,5,6>
                mov r11.xyz, cb0[11].xyzx  // light<8,9,10>
                mov r12.xyz, cb0[12].xyzx  // light<12,13,14>
                mov r0.w, cb0[12].w  // light<15>
                mov r13.xyz, cb0[13].xyzx  // light<16,17,18>
                
                #line 112 "../LightDef.fx"
                add r12.xyz, r14.xyzx, r12.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 115
                dp3 r2.w, r12.xyzx, r12.xyzx
                sqrt r15.y, r2.w  // dist<0:NaN:Inf>
                
                #line 118
                lt r0.w, r0.w, r15.y
                
                #line 122
                if_z r0.w
                  div r12.xyz, r12.xyzx, r15.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 125
                  mul r9.xyz, r3.xyzx, r9.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 128
                  dp3 r0.w, r12.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 131
                  lt r2.w, l(0.000000), r0.w
                  mov r12.xyz, -r12.xyzx
                  dp3 r3.w, r12.xyzx, r0.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r16.xyz, r0.xyzx, r3.wwww
                  add r12.xyz, r12.xyzx, r16.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r12.xyzx, r2.xyzx
                  max r3.w, r3.w, l(0.000000)
                  log r3.w, r3.w
                  mul r3.w, r3.w, r5.w
                  exp r3.w, r3.w  // specFactor<0:NaN:Inf>
                  mul r12.xyz, r4.xyzx, r0.wwww
                  mul r10.xyz, r10.xyzx, r12.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r12.xyz, r5.xyzx, r3.wwww
                  mul r11.xyz, r11.xyzx, r12.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 131
                  movc r10.xyz, r2.wwww, r10.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r11.xyz, r2.wwww, r11.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 141
                  mul r15.z, r15.y, r15.y
                  mov r15.x, l(1.000000)
                  dp3 r0.w, r13.xyzx, r15.xyzx
                  div r0.w, l(1.000000), r0.w  // atten<0:NaN:Inf>
                  mul r10.xyz, r0.wwww, r10.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r11.xyz, r0.wwww, r11.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 122
                else 
                  mov r9.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r10.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r11.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 196 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                mov r9.xyz, r9.xyzx  // A<0:Inf,1:Inf,2:Inf>
                mov r10.xyz, r10.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r11.xyz, r11.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r6.xyz, r6.xyzx, r9.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r7.xyz, r7.xyzx, r10.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r8.xyz, r8.xyzx, r11.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 207
                nop 
                mov r9.xyz, cb0[14].xyzx  // light<0,1,2>
                mov r10.xyz, cb0[15].xyzx  // light<4,5,6>
                mov r11.xyz, cb0[16].xyzx  // light<8,9,10>
                mov r12.xyz, cb0[17].xyzx  // light<12,13,14>
                mov r13.xyz, cb0[18].xyzx  // light<16,17,18>
                mov r15.xyz, cb0[19].xyzx  // light<20,21,22>
                mov r0.w, cb0[17].w  // light<15>
                mov r2.w, cb0[18].w  // light<19>
                
                #line 167 "../LightDef.fx"
                add r12.xyz, r14.xyzx, r12.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 170
                dp3 r3.w, r12.xyzx, r12.xyzx
                sqrt r16.y, r3.w  // dist<0:NaN:Inf>
                
                #line 173
                lt r0.w, r0.w, r16.y
                
                #line 177
                if_z r0.w
                  div r12.xyz, r12.xyzx, r16.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                  mul r9.xyz, r3.xyzx, r9.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 183
                  dp3 r0.w, r12.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 186
                  lt r3.w, l(0.000000), r0.w
                  mov r12.xyz, -r12.xyzx
                  dp3 r4.w, r12.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mov r4.w, -r4.w
                  mul r17.xyz, r0.xyzx, r4.wwww
                  add r17.xyz, r12.xyzx, r17.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r17.xyzx, r2.xyzx
                  max r4.w, r4.w, l(0.000000)
                  log r4.w, r4.w
                  mul r4.w, r4.w, r5.w
                  exp r4.w, r4.w  // specFactor<0:NaN:Inf>
                  mul r17.xyz, r4.xyzx, r0.wwww
                  mul r10.xyz, r10.xyzx, r17.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r17.xyz, r5.xyzx, r4.wwww
                  mul r11.xyz, r11.xyzx, r17.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 186
                  movc r10.xyz, r3.wwww, r10.xyzx, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r11.xyz, r3.wwww, r11.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 196
                  dp3 r0.w, r12.xyzx, r13.xyzx
                  max r0.w, r0.w, l(0.000000)
                  log r0.w, r0.w
                  mul r0.w, r0.w, r2.w
                  exp r0.w, r0.w  // spot<0:NaN:Inf>
                
                #line 199
                  mul r16.z, r16.y, r16.y
                  mov r16.x, l(1.000000)
                  dp3 r2.w, r15.xyzx, r16.xyzx
                  div r2.w, r0.w, r2.w  // attenuation<0:NaN:Inf>
                  mul r9.xyz, r0.wwww, r9.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r2.wwww, r10.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r11.xyz, r2.wwww, r11.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r9.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r10.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r11.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 207 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                mov r9.xyz, r9.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r10.xyz, r10.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r11.xyz, r11.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r6.xyz, r6.xyzx, r9.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r7.xyz, r7.xyzx, r10.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r8.xyz, r8.xyzx, r11.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 207
                nop 
                mov r9.xyz, cb0[20].xyzx  // light<0,1,2>
                mov r10.xyz, cb0[21].xyzx  // light<4,5,6>
                mov r11.xyz, cb0[22].xyzx  // light<8,9,10>
                mov r12.xyz, cb0[23].xyzx  // light<12,13,14>
                mov r13.xyz, cb0[24].xyzx  // light<16,17,18>
                mov r15.xyz, cb0[25].xyzx  // light<20,21,22>
                mov r0.w, cb0[23].w  // light<15>
                mov r2.w, cb0[24].w  // light<19>
                
                #line 167 "../LightDef.fx"
                add r12.xyz, r14.xyzx, r12.xyzx  // lightVec<0:Inf,1:Inf,2:Inf>
                
                #line 170
                dp3 r3.w, r12.xyzx, r12.xyzx
                sqrt r14.y, r3.w  // dist<0:NaN:Inf>
                
                #line 173
                lt r0.w, r0.w, r14.y
                
                #line 177
                if_z r0.w
                  div r12.xyz, r12.xyzx, r14.yyyy  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 180
                  mul r3.xyz, r3.xyzx, r9.xyzx  // ambient<0:Inf,1:Inf,2:Inf>
                
                #line 183
                  dp3 r0.w, r12.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 186
                  lt r3.w, l(0.000000), r0.w
                  mov r9.xyz, -r12.xyzx
                  dp3 r4.w, r9.xyzx, r0.xyzx
                  add r4.w, r4.w, r4.w
                  mov r4.w, -r4.w
                  mul r0.xyz, r0.xyzx, r4.wwww
                  add r0.xyz, r9.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r0.x, r0.xyzx, r2.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, r5.w
                  exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                  mul r0.yzw, r4.xxyz, r0.wwww
                  mul r0.yzw, r10.xxyz, r0.yyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.xyz, r5.xyzx, r0.xxxx
                  mul r2.xyz, r11.xyzx, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 186
                  movc r0.xyz, r3.wwww, r0.yzwy, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  movc r2.xyz, r3.wwww, r2.xyzx, l(0,0,0,0)  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 196
                  dp3 r0.w, r9.xyzx, r13.xyzx
                  max r0.w, r0.w, l(0.000000)
                  log r0.w, r0.w
                  mul r0.w, r0.w, r2.w
                  exp r0.w, r0.w  // spot<0:NaN:Inf>
                
                #line 199
                  mul r14.z, r14.y, r14.y
                  mov r14.x, l(1.000000)
                  dp3 r2.w, r15.xyzx, r14.xyzx
                  div r2.w, r0.w, r2.w  // attenuation<0:NaN:Inf>
                  mul r3.xyz, r0.wwww, r3.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r0.xyz, r0.xyzx, r2.wwww  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r2.xyz, r2.wwww, r2.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r3.xyz, l(0,0,0,0)  // ambient<0: 0f,1: 0f,2: 0f>
                  mov r0.xyz, l(0,0,0,0)  // diffuse<0: 0f,1: 0f,2: 0f>
                  mov r2.xyz, l(0,0,0,0)  // specular<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 207 "C:\Users\Gnidleif\Documents\GitHub\3D_Project\TreDe\Data\FX\NormalMap\NormalMap.fx"
                mov r3.xyz, r3.xyzx  // A<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r3.xyz, r3.xyzx, r6.xyzx  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r0.xyz, r0.xyzx, r7.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r2.xyz, r2.xyzx, r8.xyzx  // specular<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 214
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r1.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r1.xyz, r1.xyzx, cb2[0].xxxx
                add r0.xyz, r0.xyzx, r1.xyzx  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 219
                mul r0.w, r1.w, cb1[1].w  // litColor<3:NaN:Inf>
                mov o0.xyz, r0.xyzx  // PSScene_Lights<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PSScene_Lights<3:NaN:Inf>
                ret 
                // Approximately 278 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = NULL;
            RasterizerState = Solidframe;
            DS_StencilRef = uint(0);
            DepthStencilState = NoDepthWrites;
        }

    }

}

